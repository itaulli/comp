# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CPInitialValue')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CPInitialValue')
    _CPInitialValue = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CPInitialValue', [dirname(__file__)])
        except ImportError:
            import _CPInitialValue
            return _CPInitialValue
        try:
            _mod = imp.load_module('_CPInitialValue', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CPInitialValue = swig_import_helper()
    del swig_import_helper
else:
    import _CPInitialValue
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class CPInitialValueSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPInitialValueSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPInitialValueSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CPInitialValue.delete_CPInitialValueSolver
    __del__ = lambda self: None

    def setInitialValues(self, array: 'PyObject *', timeStep: 'unsigned int'=0) -> "PyObject *":
        return _CPInitialValue.CPInitialValueSolver_setInitialValues(self, array, timeStep)

    def convert(self) -> "PyObject *":
        return _CPInitialValue.CPInitialValueSolver_convert(self)

    def step(self) -> "void":
        return _CPInitialValue.CPInitialValueSolver_step(self)

    def resultTime(self) -> "unsigned int":
        return _CPInitialValue.CPInitialValueSolver_resultTime(self)
CPInitialValueSolver_swigregister = _CPInitialValue.CPInitialValueSolver_swigregister
CPInitialValueSolver_swigregister(CPInitialValueSolver)

class LaxAdvectionSolver1d(CPInitialValueSolver):
    __swig_setmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LaxAdvectionSolver1d, name, value)
    __swig_getmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LaxAdvectionSolver1d, name)
    __repr__ = _swig_repr

    def __init__(self, nSpatialPoints: 'unsigned int', c: 'double', dt: 'double', dx: 'double', boundaryType: 'int'=1):
        this = _CPInitialValue.new_LaxAdvectionSolver1d(nSpatialPoints, c, dt, dx, boundaryType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CPInitialValue.delete_LaxAdvectionSolver1d
    __del__ = lambda self: None
LaxAdvectionSolver1d_swigregister = _CPInitialValue.LaxAdvectionSolver1d_swigregister
LaxAdvectionSolver1d_swigregister(LaxAdvectionSolver1d)

class Leapfrog(CPInitialValueSolver):
    __swig_setmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Leapfrog, name, value)
    __swig_getmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Leapfrog, name)
    __repr__ = _swig_repr

    def __init__(self, nSpatialPoints: 'unsigned int', c: 'double', dt: 'double', dx: 'double', boundaryType: 'int'=1):
        this = _CPInitialValue.new_Leapfrog(nSpatialPoints, c, dt, dx, boundaryType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CPInitialValue.delete_Leapfrog
    __del__ = lambda self: None
Leapfrog_swigregister = _CPInitialValue.Leapfrog_swigregister
Leapfrog_swigregister(Leapfrog)

class WaveSolver2d(CPInitialValueSolver):
    __swig_setmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveSolver2d, name, value)
    __swig_getmethods__ = {}
    for _s in [CPInitialValueSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveSolver2d, name)
    __repr__ = _swig_repr

    def __init__(self, nPoints: 'unsigned int const [2]', c: 'double', dt: 'double', dx: 'double', dy: 'double', boundaryType: 'int'=0):
        this = _CPInitialValue.new_WaveSolver2d(nPoints, c, dt, dx, dy, boundaryType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _CPInitialValue.delete_WaveSolver2d
    __del__ = lambda self: None
WaveSolver2d_swigregister = _CPInitialValue.WaveSolver2d_swigregister
WaveSolver2d_swigregister(WaveSolver2d)

# This file is compatible with both classic and new-style classes.


