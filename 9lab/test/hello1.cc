// This code illustrates basic creation of multiple threads.
//
// TTU Computational Physics course (PHYS 4301/5322)
// I. Volobouev
// 02/04/2018

// To use threads, we must include the standard header file <thread>
#include <thread>

// Other standard headers needed for this example
#include <iostream>
#include <string>

// The following class is a functor -- it implements "operator()".
// C++ functors are similar in purpose to Python callables.
class Hello1
{
public:
    // Class constructor. The arguments "message" and "n"
    // will be stored internally and will be printed by
    // "operator()" defined next.
    Hello1(const std::string& message, const unsigned n)
        : message_(message), myNumber_(n) {}

    // Even though this class does not declare/define the copy
    // constructor and the assignment operator, these methods
    // will be automatically generated by the compiler

    // Our threads will call the following operator. "const"
    // after the method declaration means that this function
    // will not modify internal data members of this class.
    void operator()() const
    {
        std::cout << message_ << " from " << myNumber_ << "!\n";
    }

private:
    std::string message_;
    unsigned myNumber_;
};


// This is the program code
int main()
{
    // Create the threads. Upon creation, the threads
    // are immediately scheduled for execution. The thread
    // constructor arguments are functors whose "operator()"
    // methods will be run. The functors will be copied
    // (that is, their copy constructor will be invoked,
    // no matter whether explicitly coded or automatically
    // generated).
    std::thread t1{Hello1("Hello", 1)};
    std::thread t2{Hello1("Greetings", 2)};
    std::thread t3{Hello1("Hi", 3)};
    std::thread t4{Hello1("Bye-bye", 4)};

    // Wait until the threads run to completion. This is
    // performed by calling the "join" method of each thread.
    t1.join();
    t2.join();
    t3.join();
    t4.join();

    // We are done. Return value of 0 means success.
    return 0;
}
